#lang racket
(define (dot-product v w)
(accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
(map ⟨ ?? ⟩ m))

(define (transpose mat)
(accumulate-n
⟨ ?? ⟩ ⟨ ?? ⟩ mat))

(define (matrix-*-matrix m n)
(let ((cols (transpose n)))
(map
⟨ ?? ⟩ m)))

(define (accumulate-n op init seqs)
   (if (null? (car seqs))
       null
       (cons (accumulate op init (map car seqs))
             (accumulate-n op init (map cdr seqs)))))

(define (accumulate op initial sequence)
   (if (null? sequence)
       initial
       (op (car sequence)
           (accumulate op initial (cdr sequence)))))