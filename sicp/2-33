#lang racket
(define (map p sequence)
   (accumulate (lambda (x y) (cons (p x) y)) null sequence))

(define (append seq1 seq2)
   (accumulate cons seq2 seq1))

(define (length sequence)
   (accumulate (lambda (x y) (+ 1 y)) 0 sequence))

(define (accumulate op initial sequence)
   (if (null? sequence)
       initial
       (op (car sequence)
           (accumulate op initial (cdr sequence)))))

(map (lambda(x) (* x x)) (list 1 2 3 4 5)) (newline)
(append (list 1 2 3) (list 4 5 6)) (newline)

(length (list 9 8 7 6 5)) (newline)