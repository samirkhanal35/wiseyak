#lang racket

(#%require (only racket/base current-milliseconds))
(define (runtime) (current-milliseconds))

(define (timed-prime-test n)
(newline)
(display n)
(start-prime-test n (runtime)))

(define (square x) (* x x))

(define (expmod base exp m)
(cond ((= exp 0) 1)
((even? exp)
(remainder
(square (expmod base (/ exp 2) m))
m))
(else
(remainder
(* base (expmod base (- exp 1) m))
m))))

(define (fermat-test n)
(define (try-it a)
(= (expmod a n n) a))
(try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
(cond ((< times 0) true)
((fermat-test n) (fast-prime? n (- times 1)))
(else false)))

(define (start-prime-test n start-time)
(cond ((fast-prime? n 50)
(report-prime (- (runtime) start-time)))
      (else (display "\nNot Prime."))
  ))
(define (report-prime elapsed-time)
(display " *** ")
(display elapsed-time))

(display "time needed for 991")
(timed-prime-test 991)
(display "\ntime needed for 1999")
(timed-prime-test 1999)
(display "\ntime needed for 9991")
(timed-prime-test 9991)
(display "\ntime needed for 99991")
(timed-prime-test 99991)
(display "\ntime needed for 98389")
(timed-prime-test 98389)
(display "\ntime needed for 50943779")
(timed-prime-test 50943779)
(display "\ntime needed for 1024243321")
(timed-prime-test 1024243321)
