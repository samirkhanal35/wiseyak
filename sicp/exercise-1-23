#lang racket
(#%require (only racket/base current-milliseconds))
(define (runtime) (current-milliseconds))

(define (smallest-divisor n) (find-divisor n 2))

(define (square x) (* x x))

(define (next divisor)
  (cond
    ((= divisor 2) 3)
    (else (+ divisor 2))))

(define (find-divisor n test-divisor)
(cond ((> (square test-divisor) n) n)
((divides? test-divisor n) test-divisor)
(else (find-divisor n (next test-divisor)))))

(define (divides? a b) (= (remainder b a) 0))

(define (timed-prime-test n)
(newline)
(display n)
(start-prime-test n (runtime)))

(define (start-prime-test n start-time)
(cond ((= (smallest-divisor n) n)
(report-prime (- (runtime) start-time)))
  (else (display "\nNot Prime"))
  ))
(define (report-prime elapsed-time)
(display " *** ")
(display elapsed-time))

(display "time needed for 991")
(timed-prime-test 991)
(display "\ntime needed for 1999")
(timed-prime-test 1999)
(display "\ntime needed for 9991")
(timed-prime-test 9991)
(display "\ntime needed for 99991")
(timed-prime-test 99991)
(display "\ntime needed for 98389")
(timed-prime-test 98389)
(display "\ntime needed for 50943779")
(timed-prime-test 50943779)
(display "\ntime needed for 1024243321")
(timed-prime-test 1024243321)
