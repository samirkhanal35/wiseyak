#lang racket
(define (map proc x)
(cond ((null? x) null)
((not (pair? x))  (proc x))
(else (cons (map proc (car x))
(map proc (cdr x)))))
)

(define (square-tree tree) (map (lambda(x) (* x x)) tree))

(square-tree
(list 1
(list 2 (list 3 4) 5)
(list 6 7)))