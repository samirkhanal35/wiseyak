#lang racket
(define (nth-fibonacci n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        ((> n 1) (+ (nth-fibonacci (- n 1)) (nth-fibonacci (- n 2))))
   ))

(define (average x y)
(/ (+ x y) 2))

(define (square x) (* x x))

(define (power times x)
  (if (> times 0) (* x (power (- times 1) x)) 1)        
  )

(define (improve guess x)
(average guess (/ x guess)))

(define (good-enough? guess x)
(< (abs (- (square guess) x)) 0.001))

(define (sqrt-iter guess x)
(if (good-enough? guess x)
guess
(sqrt-iter (improve guess x) x)))

(define (sqrt x)
(sqrt-iter 1.0 x))

(define square-root-of-five  (sqrt 5))

(define (nth-rightHandSide n)  
  (/
   (- (power n (+ 1 square-root-of-five)) (power n (- 1 square-root-of-five)))
   (* (power n 2) square-root-of-five )))

(define (prove-fiboClosest-t0Integer n)
  (define (fibonacci-output m) (floor(* (nth-fibonacci m) 1.0)))
  (define (RHS-output m) (floor(nth-rightHandSide m)))
  (if (= (fibonacci-output n) (RHS-output n))
      (write "Proved!! Both have same output integer\n")
      
      (display "Not Proved!! "))
  )

(prove-fiboClosest-t0Integer 5)