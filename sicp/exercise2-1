#lang racket
(define (add-rat x y)
(make-rat (+ (* (numer x) (denom y))
(* (numer y) (denom x)))
(* (denom x) (denom y))))

(define (sub-rat x y)
(make-rat (- (* (numer x) (denom y))
(* (numer y) (denom x)))
(* (denom x) (denom y))))

(define (mul-rat x y)
(make-rat (* (numer x) (numer y))
(* (denom x) (denom y))))

(define (div-rat x y)
(make-rat (* (numer x) (denom y))
(* (denom x) (numer y))))

(define (equal-rat? x y)
(= (* (numer x) (denom y))
(* (numer y) (denom x))))

(define (make-rat n d) (cons n d))

(define (numer x)
(let ((g (gcd (car x) (cdr x))))
(/ (car x) g)))

(define (denom x)
(let ((g (gcd (car x) (cdr x))))
(/ (cdr x) g)))

(define (print-rat x)
(newline)
(display (numer x))
(display "/")
(display (denom x)))

(define one-half (make-rat 1 2))
(define negative-one-half (make-rat -1 2))

(print-rat one-half)
(print-rat negative-one-half)
(display "\n")
(display (numer negative-one-half))

(define one-third (make-rat -1 4))

(print-rat (add-rat negative-one-half one-third))

(print-rat (mul-rat negative-one-half one-third))
(print-rat (mul-rat negative-one-half negative-one-half))

(print-rat (add-rat negative-one-half negative-one-half))