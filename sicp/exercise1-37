#lang racket
(define (cont-frac-recur n d k)
  (define (recur i)
    (if (= k i)
        (/ (n i) (d i))
        (/ (n i) (+ (d i) (recur (+ 1 i))))))
  (recur 1))

(define (cont-frac-iter n d k)
  (define (iter i result)
    (if (= 0 i)
        result
        (iter (sub1 i) (/ (n i) (+ result (d i))))))
  (iter (sub1 k) (/ (n k) (d k))))

(display (cont-frac-recur (lambda (i) 1.0)
           (lambda (i) 1.0)
           12))
(display "\n")

(display (cont-frac-iter (lambda (i) 1.0)
           (lambda (i) 1.0)
           12))
