#lang racket
(define (tree-map proc x)
(cond ((null? x) null)
((not (pair? x))  (proc x))
(else (cons (tree-map proc (car x))
(tree-map proc (cdr x)))))
)

(define (square x) (* x x))

(define (square-tree tree) (tree-map square tree))

(square-tree
(list 1
(list 2 (list 3 4) 5)
(list 6 7)))